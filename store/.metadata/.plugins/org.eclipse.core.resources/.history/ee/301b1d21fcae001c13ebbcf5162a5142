package com.pearson.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;

import java.io.UnsupportedEncodingException;
import java.util.Map;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.web.context.WebApplicationContext;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.pearson.dto.Store;
import com.pearson.responsemessage.ResponseMessage;
import com.pearson.service.StoreServiceImpl;

public class ControllerTest {

	@Mock
	private StoreServiceImpl implementation;

	@InjectMocks
	private StoreController storeController;

	@Autowired
	private WebApplicationContext context;

	@SuppressWarnings("unused")
	private MockMvc mockMvc;
	private ObjectMapper mapper;

	@Test
	void testFetchStoreDetailsByID() throws UnsupportedEncodingException, Exception {

		Store store = new Store();
		store.setStoreId("1525eec4-7bed-4597-bf5a-e06fcede5f4f");
		store.setPostCode("563322");
		store.setCity("bangalore");
		store.setAddress("krt");
		store.setOpeningDate("12/12/1776");

		Mockito.when(implementation.getStoreById(Mockito.anyString())).thenReturn(store);
		String jsonObject = mapper.writeValueAsString(store);
		String result = mockMvc
				.perform(get("/api/v1/fetch/1525eec4-7bed-4597-bf5a-e06fcede5f4f")
						.contentType(MediaType.APPLICATION_JSON_VALUE).content(jsonObject))
				.andExpect(MockMvcResultMatchers.status().isOk()).andReturn().getResponse().getContentAsString();
		ResponseMessage responseMessage = mapper.readValue(result, ResponseMessage.class);
		@SuppressWarnings("unchecked")
		Map<String, String> map = (Map<String, String>) responseMessage.getData();
		for (Map.Entry<String, String> m : map.entrySet()) {
			assertEquals(store.getStoreId(), m.getValue());
			break;
		}

}
