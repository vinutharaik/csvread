package com.pearson.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.pearson.dto.Store;
import com.pearson.responsemessage.ResponseMessage;
import com.pearson.responsemessage.ResponseMessages;
import com.pearson.service.StoreServiceImpl;

@RestController
@RequestMapping("/")
public class StoreController {
	Logger logger = LoggerFactory.getLogger(Store.class);
	/*
	 * @Autowired private StoreService storeService;
	 * 
	 * @GetMapping("/fetchById/{storeId}") public ResponseEntity<String>
	 * fetchStoreDetailById(@PathVariable String storeId) { try { Store store =
	 * storeService.fetchStoreDetailById(storeId); if (store != null) {
	 * logger.info("Displaying the Store Details {} ", store.getStoreId() + " " +
	 * store.getPostCode() + " " + store.getCity() + " " + store.getAddress() + " "
	 * + store.getOpeningDate()); return new ResponseEntity<String>(HttpStatus.OK);
	 * } } catch (
	 * 
	 * Exception e) { e.printStackTrace(); } logger.error("no data is found or");
	 * return new ResponseEntity<>(HttpStatus.NOT_FOUND); }
	 * 
	 * @GetMapping("/fetchAllData") public void fetchAllData() {
	 * storeService.csvReader();
	 * 
	 * }
	 * 
	 * 
	 * @Autowired private StoreServiceImpl serviceImpl;
	 * 
	 * @PostMapping("/upload") public String fetchById(MultipartFile file) { try {
	 * serviceImpl.fetchById(file); } catch (IOException e) { e.printStackTrace(); }
	 * return "ok"; }
	 */
	@Autowired
	private StoreServiceImpl storeServiceImpl;

	@GetMapping("getAll")
	public ResponseEntity<?> getAll() {
		return ResponseEntity.ok(storeServiceImpl.getAll());
	}

	@GetMapping("getByStoreId/{storeId}")
	public ResponseEntity<ResponseMessage> getByStoreId(@PathVariable String storeId) {
		Store storeById = storeServiceImpl.getStoreById(storeId);
		ResponseMessage storeResponse = new ResponseMessage();
		if (storeById == null) {
			logger.error("No such store id is found");
			storeResponse.setMessage("Invalide Message");
			storeResponse.setObject(null);
			return new ResponseEntity<ResponseMessage>(storeResponse, HttpStatus.BAD_REQUEST);
		}
		logger.info("The data is found for given stored Id");
		storeResponse.setMessage("The Store Data Is");
		storeResponse.setObject(storeById);
		return new ResponseEntity<ResponseMessage>(storeResponse, HttpStatus.OK);
	}

	@GetMapping("orederedByCities")
	public ResponseEntity<ResponseMessage> orderedByCity() {
		List<Store> storesOrderesByCity = storeServiceImpl.getStoresOrderesByCity();
		ResponseMessage storeResponse = new ResponseMessage();
		if (storesOrderesByCity == null) {
			logger.error("Data is not oredered based on city");
			storeResponse.setMessage("Invalide Message");
			storeResponse.setObject(null);
			return new ResponseEntity<ResponseMessage>(storeResponse, HttpStatus.BAD_REQUEST);
		}
		logger.info("Data is oreded based on city");
		storeResponse.setMessage("The Store Data Is");
		storeResponse.setObject(storesOrderesByCity);
		return new ResponseEntity<ResponseMessage>(storeResponse, HttpStatus.OK);

	}

	@GetMapping("orederedByOpeningDate")
	public ResponseEntity<ResponseMessage> orderedByOpeningDate() {
		List<Store> storesOrderesByDate = storeServiceImpl.getStoresOrderesByDate();
		ResponseMessage storeResponse = new ResponseMessage();
		if (storesOrderesByDate == null) {
			logger.error("The data is not ordered based on date");
			storeResponse.setMessage("Invalide Message");
			storeResponse.setObject(null);
			return new ResponseEntity<ResponseMessage>(storeResponse, HttpStatus.BAD_REQUEST);
		}
		logger.info("The data is oredered based on Date");
		storeResponse.setMessage("The Store Data Is");
		storeResponse.setObject(storesOrderesByDate);
		return new ResponseEntity<ResponseMessage>(storeResponse, HttpStatus.OK);

	}

}
