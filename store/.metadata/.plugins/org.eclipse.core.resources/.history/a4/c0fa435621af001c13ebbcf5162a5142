package com.pearson.serviceimpl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;

import com.pearson.dto.Store;
import com.pearson.service.StoreService;

@SpringBootTest
public class StoreServiceImpl {

	@Mock
	private StoreService service;
	
	

	/*
	 * @Test void testFetchAllStores() {
	 * 
	 * Store store = new Store(); store.setAddress("krt");
	 * store.setCity("bangalore"); store.setPostCode("563322");
	 * store.setStoreId("1525eec4-7bed-4597-bf5a-e06fcede5f4f");
	 * 
	 * List<Store> list = new ArrayList<>(); list.add(store);
	 * 
	 * assertEquals("1525eec4-7bed-4597-bf5a-e06fcede5f4f", ((List<Store>) ((Object)
	 * service).("city")).get(0).getStoreId()); }
	 */
	
	@Test
	public void testFetchallStore() {
		when(service.getStoreById("1")).thenReturn(new Store("1", "555", "mys","mys", "openingDate"));
		String storeById = service.getStoreById("1").toString();
		assertEquals("Store [storeId=1, postCode=555, city=mys, address=mys, openingDate=openingDate]", storeById);
	}
	@Test
	public void  getStoresOrderesByCity() {
//		when(service.getStoresOrderesByCity().thenReturn(Arrays.asList(new Store("1", "555", "mys","mys", "openingDate"));
		when(service.getStoresOrderesByCity()).thenReturn(Arrays.asList(new Store("1", "555", "mys","mys", "openingDate")));
		 List<Store> storesOrderesByCity = service.getStoresOrderesByCity();
		assertEquals("mys",storesOrderesByCity.get(0).getAddress() );
	}

}
